mutex mtx;
condvar prod, cons;
int prod_count = 0, cons_count = 0;
struct kfifo cbuffer;

//Productor
int fifoproc_write(char* buff, int len) {
	char kbuffer[MAX_KBUF];

	if (len> MAX_CBUFFER_LEN || len> MAX_KBUF) { return Error;}
	if (copy_from_user(kbuffer,buff,len)) { return Error;}
	
	lock(mtx);
	/* Esperar hasta que haya hueco para insertar (debe haber consumidores) */
	while (kfifo_avail(&cbuffer)<len && cons_count>0){
		cond_wait(prod,mtx);
	}
	/* Detectar fin de comunicación por error (consumidor cierra FIFO antes) */
	if (cons_count == 0) {unlock(mtx); return -EPIPE;}
	kfifo_in(&cbuffer,kbuffer,len);
	/* Despertar a posible consumidor bloqueado */
	cond_signal(cons);
	unlock(mtx);
	return len;
}

void fifoproc_open(bool abre_para_lectura){
	lock(mtx);
	if(abre_para_lectura == true){
		
		cons_count++;
		cond_signal(prod,mtx);
		while(prod_count < 1)
			cond_wait(cons,mtx);
		

	}

	else{//abre para escritura
		prod_count++;
		cond_signal(cons,mtx);
		while(cons_count < 1)
			cond_wait(prod,mtx);
	}
	unlock(mtx);
}

int fifoproc_read(const char* buff, int len){
	char kbuffer[MAX_KBUF];
	if (len> MAX_CBUFFER_LEN || len> MAX_KBUF) { return Error;}
	if (copy_from_user(kbuffer,buff,len)) { return Error;}
	
	lock(mtx);
	while(prod_count > 0 && kfifo_avail(&cbuffer)<len)
		cond_wait(cons,mtx);
	/* Detectar fin de comunicación por error (No hay productores y el buffer esta vacio ) */
	if (prod_count == 0 && kfifo_isempty(cbuffer)) {unlock(mtx); return 0;}
	kfifo_out(&cbuffer, kbuffer,len);

	cond_signal(prod);
	unlock(mtx);
}

void fifoproc_release(bool lectura){
	lock(mtx);
	if(lectura == true){//se elimina un escritor(productor)
		cons_count--;
		cond_signal(prod,mtx);
	}

	else{//se elimina un lector(consumidor)
		prod_count--;
		cond_signal(cons,mtx);
		
	}
	//vaciar buffer kfiforeset
	if(prod_count == 0 && cons_count == 0)
		//kfiforeset
		kfifo_reset(cbuffer);
	unlock(mtx);
}
